@page "/"
@page "/hello"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable


<AuthorizeView>
    <Authorized>
<PageTitle>Rando</PageTitle>
<h3>Chat</h3>

@if (!IsConnected)
{
    <div class="input-group">
        <input @bind="username" class="form-control" placeholder="Username">
        <button class="btn btn-primary form-control-append" @onclick="Connect">Connect</button>

    </div>
} else
{
    <textarea @ref="TextAreaRef" style="width: 100%; height: 500px;">@messages</textarea>
    <div class="input-group">
        <input @bind-value="message" @bind-value:event="oninput" @onkeyup="HandleInput" class="form-control">
        <button class="btn btn-primary form-group-append" @onclick="Send" disabled="@(!IsConnected)">Send</button>
    </div>
}
</Authorized>
<NotAuthorized>
    Sorry, you must be logged in to view this area.
    </NotAuthorized>
    </AuthorizeView>

@code {
    private HubConnection? hubConnection;
    private string messages = string.Empty;
    private string message = string.Empty;
    private string username = string.Empty;
    ElementReference TextAreaRef;

    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri($"/chathub?username={username}")).Build();


        hubConnection.On<string, string>("RecieveMessage", (user, message) => {
            var msg = $"{(string.IsNullOrEmpty(user) ? "" : user + ": ")} {message}";
            messages += msg + "\n";
            JSRuntime.InvokeVoidAsync("scrollToBottom", new object[] { TextAreaRef });   
            StateHasChanged();
        });
        await hubConnection.StartAsync();

    }

    private async Task Send()
    {
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("AddMessageToChat", username, message);
            message = string.Empty;
        }
    }

    private async Task HandleInput(KeyboardEventArgs args)
    {
        if (args.Key == null || args.Key.Equals("Enter"))
        {
            await Send();
        }
    }
    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if(hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}